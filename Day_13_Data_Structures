#DAY 13 Python IDC 30 Days CHALLENGE.
#Topics-Stacks, queues (implementation with lists)
#Challenge-Implement a stack with push, pop, and peek

# üì¶ Stack implementation using a Python list
class Stack:
    def __init__(self):
        # Initialize an empty list to store stack elements
        self.stack = []
    def push(self, item):
        """Add item to the top of the stack."""
        self.stack.append(item)  # Append item to the end (top of stack)
        print(f"Pushed: {item}")  # Confirm push action
    def pop(self):
        """Remove and return the top item. Returns None if stack is empty."""
        if not self.is_empty():  # Check if stack is not empty
            return self.stack.pop()  # Remove and return top item
        else:
            print("Stack is empty. Cannot pop.")  # Handle empty stack
            return None  # Return None when no element to pop
    def peek(self):
        """Return the top item without removing it."""
        if not self.is_empty():  # Check if stack is not empty
            return self.stack[-1]  # Return last item (top of stack)
        else:
            print("Stack is empty. Nothing to peek.")  # Handle empty stack
            return None  # Return None when stack is empty
    def is_empty(self):
        """Check if the stack is empty."""
        return len(self.stack) == 0  # Returns True if stack has no elements
    def display(self):
        """Display the current stack."""
        print("Current Stack:", self.stack)  # Print the full stack list
# üîç Example usage of the Stack class
s = Stack()            # Create a new empty stack object
s.push(10)             # Push 10 onto the stack
s.push(20)             # Push 20 onto the stack
s.push(30)             # Push 30 onto the stack
print("Peek:", s.peek())   # View the top item (should be 30)
print("Popped:", s.pop())  # Pop the top item (removes 30)
s.display()  # Show current state of the stack (should be [10, 20])
